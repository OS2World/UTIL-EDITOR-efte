# Alternate FTE mode for editing CSS files
# maintained by mrwarper@yahoo.es
#
# Revision 2011/02
#
# -Added last-child pseudoselector
#
# Revision 2007/05/08
#
# -Syntax parsing, minor bug: added transition from 'selector'
#  to 'rules' mode when a '{' is found without spaces in between
# -Added preliminary support for at-rules.
#
# +Major syntax parse improvement for selector stacking marks as invalid:
# -unappropriately leading selector separators, i.e. any of {,>+}
# -anything following an incomplete selector or selector list, until
#  a valid selector is found
#
# -Planned to repeat the trick for incomplete properties lists ;)
#
# Revision 2006/08/31
#
# Latest changes:
#
# -Syntax parser works (with comments included!) and looks pretty solid to me.
# -Added preliminary menus to UI.
#
# Revision 2006/07/01
#
# First public release
#

colorize CSS {
    SyntaxParser = 'SIMPLE';

    color {
        { 'Normal',      'Editor_Default' },
        { 'Punctuation', 'Lang_Punctuation' },
        { 'String',      'Lang_String' },
        { 'Comment',     'Lang_Comment' },
        { 'Special',     'Editor_HilitWord' }
    };

    # First keywords: at-rules, and XHTML tags
    # Only allowed as selectors, but we'll define them as global
    # so thay can easily be spotted if typed somewhere else

    keyword "Editor_Keywords" {
        # first of all, at-rules and their keywords
        "@font-face", "@page", "@import", "@charset",
        # media and the traditional ones...
        "@media", "screen", "print", "all",
        "aural", "handheld", "projection", "braille", "embossed", "tty", "tv",
        "url",
        # block XHTML markup
        # But for now, leave out the doc-struct ones, and the 'head' section
        # "head", "title", "frameset", "noframes",
        # "link", "meta", "style", "frame",
        # "script", "param",
        "*","html", "body", "iframe",
        "h1", "h2", "h3", "h4", "h5", "h6",
        "p", "ul", "ol", "li", "dd", "dl", "dt",
        "pre", "blockquote", "div",
        "table", "thead", "tfoot", "tbody", "tr", "th",
        "col", "colgroup",
        "form", "fieldset", "select",
        "address",
        #I'm not 100% sure about these:
        "hr", "map", "noscript",
        "textarea"
     };

    keyword "Editor_Keywords2" { # XHTML inline markup (and blocks that are always inside other blocks)
        "a",
        "abbr", "acronym",
        "cite", "q",
        "code", "dfn", "var", "kbd", "samp",
        "br", "span",
        "b", "i", "em", "strong", "tt",
        "big", "small", "sub", "sup",
        "del", "ins",
        "img", "object",
        "legend", "input", "label", "optgroup", "option", "button",
        "caption", "td",
        #I'm not 100% sure about these:
        "area", "base", "bdo"
     };

    # Now for the states machine & syntax parsing itself...

    # Just entering the file - NOW WHAT? h_state 0
    # Only acceptable events: find a selector or a comment

    # 0: SELECTORS NEEDED - only html keywords allowed
      # everything else is wrong -> so default is 'Special'

    h_state 0 { 'Special' }
    h_wtype { 1, -1, -1, "i", "a-z1-6*@" }
    h_trans { 2, 's', '.#', 'Punctuation' }  # 2 = ids and classes, free-from
    h_trans { 8, '', '/*', 'Comment' }

    # 1: SELECTORS STACKING: OK, we have one or more selectors
    #  Now let's start with the rules or we'll need to add a new
    #  selector -> if

    h_state 1 { 'Special' }

    h_wtype { -1, -1, -1, "i", "a-z1-6*@" }
    h_trans { 0, 's', '}', 'Special' } # Next selector, please
    h_trans { 0, 's', ',>+', 'Punctuation' } # Next selector is a must
    h_trans { 2, 's', '.#', 'Punctuation' }  # 2 = ids and classes, free-from
    h_trans { 3, 's', '[' , 'Punctuation' }  # 3 = attribute names
    h_trans { 5, 's', ':', 'Punctuation'}    # 5 = pseudoselectors
    h_trans { 6, '<', '{', 'Punctuation' }   # 6 = eol, begin with rules!
    h_trans { 9, '', '/*', 'Comment' }

    # 2: FREE-STYLE: one single word for id or class name selectors

    # TODO: allow #ids to be appended to .classes but not viceversa
    #  currently .class#id is recognised as ."class#id"
    #  currently #id.class is recognised as #"id.class"

    h_state 2 { 'Normal' }
    h_trans { 0, 's', ',>+', 'Punctuation' } # Next selector, please
    h_trans { 1, 's', ' ',  'Punctuation' } # Next selector, please
    h_trans { 3, '<', '[' , 'Punctuation' }  # 3 = attribute names
    h_trans { 5, 's', ':', 'Punctuation'}    # 5 = pseudoselectors
    h_trans { 6, '<', '{', 'Punctuation' }   # 6 = eol, begin with rules!
    h_trans { 10, '', '/*', 'Comment' }

    # 3: HTML attributes (names recognised as keywords)

    h_state 3 { 'Special' }
    h_words 'Editor_Keywords3' { # block XHTML markup
	"abbr", "accept", "accept-charset", "accesskey",
	"action", "align", "alt", "archive", "axis",
	"border",
	"cellpadding", "cellspacing",  "char", "charoff", "charset",
	"checked", "cite", "class", "classid",
	"codebase", "codetype", "cols", "colspan",
	"content", "coords", "data", "datetime", "declare",
	"defer", "dir", "disabled", "enctype", "for",
	"frame", "frameborder", "headers", "height",
	"href", "hreflang", "http-equiv", "id",
	"ismap", "label", "lang", "longdesc",
	"marginheight", "marginwidth", "maxlength", "media",
	"method", "multiple", "name", "nohref",
	"noresize",
	"profile", "readonly", "rel",	"rev", "rows", "rowspan",
	"rules", "scheme", "scope", "scrolling", "selected", "shape",
        "size", "span",	"src", "standby", "style", "summary",
	"tabindex", "target", "title", "type", "usemap", "valign",
	"value", "valuetype", "width",
     }
    h_wtype { -1, -1, -1, "i", "a-z\-" }
    h_trans { 1, 's', ']', 'Punctuation'}  # selector closed; next?
    h_trans { 4, 's', '~=', 'Punctuation'} # 4 = attribute values, freestyle
    h_trans { 4, 's', '|=', 'Punctuation'} # 4 = attribute values, freestyle
    h_trans { 4, 's', '=', 'Punctuation'}  # 4 = attribute values, freestyle
    h_trans { 10, '', '/*', 'Comment' }

    # 4: FREE-STYLE 2 = attribute values
    # TODO: add the possibility of single/double-quoted strings

    h_state 4 { 'Normal' }
    h_trans { 1, 's', ']', 'Punctuation' } # Next selector, please
    h_trans { 12, '', '/*', 'Comment' }

    # 5: only pseudo-selectors allowed
    h_state 5 { 'Special' }
    h_words 'Editor_Keywords4' { #pseudoselectors
      #pseudo-classes
      "link","visited","active", "hover", #these are for links
      "focus","target",
      "first-child", "last-child",
      "lang",
      # pseudo-elements
      "first-letter","first-line","before","after"
     }
    h_wtype { 1, 1, 1, "i", "a-z\-" }

    # no 'go into comment mode' needed - h_state 0 takes care of that

    # 6: specifying one or more rule names

    h_state 6 { 'Special' }
    h_words 'Editor_Keywords4' { # CSS 2.1 properties
      # my reference: http://www.htmldog.com/reference/cssproperties/
      #Text and Fonts
      "font-family","font-size","font-weight","font-style","font-variant", "font",
      "line-height","letter-spacing","word-spacing",
      "text-align","text-decoration","text-indent","text-transform",
      "vertical-align","white-space",
      #Colours and Backgrounds
      "color","background-color","background","background-image",
      "background-repeat","background-position","background-attachment",
      #The Box Model
      "padding",
       "padding-top","padding-right","padding-bottom","padding-left",
      "border",
       "border-top","border-right","border-bottom","border-left",
      "border-style",
       "border-top-style",
       "border-right-style",
       "border-bottom-style",
       "border-left-style",
      "border-color",
       "border-top-color",
       "border-right-color",
       "border-bottom-color",
       "border-left-color",
      "border-width",
       "border-top-width",
       "border-right-width",
       "border-bottom-width",
       "border-left-width",
      "outline","outline-style","outline-color","outline-width",
      "margin","margin-top","margin-right","margin-bottom","margin-left",
      "width","height","min-width","max-width","min-height","max-height",
      #Positioning and Display
      "position","top","right","bottom","left","clip","overflow",
      "z-index","float","clear","display","visibility",
      #Lists
      "list-style","list-style-type","list-style-image","list-style-position",
      #Tables
      "table-layout","border-collapse","border-spacing","empty-cells","caption-side",
      #Generated Content
      "content","counter-increment","counter-reset","quotes",
      #Paged Media
      "page-break-before","page-break-after","page-break-inside",
      "orphans","widows","size",
      #Misc.
      "cursor","direction","unicode-bidi"
     }
    h_wtype { -1, -1, -1, "i", "a-z\-" }
    # -1 -1 X -> No keyword: madness!!!
    h_trans { 6, '', ',', 'Punctuation' } # comma separated rules
    h_trans { 7, '', ':', 'Punctuation' } # get to specify rule(s) value
    h_trans { 6, '', ';', 'Punctuation' } # abrupt end of rule setting -> next rule
    h_trans { 0, '>', '}', 'Punctuation' } # abrupt end of rule setting
    h_trans { 13, '', '/*', 'Comment' }

    # 7: rule values!

    h_state 7 { 'String' }
    h_words 'Editor_Keywords3' { # known rule value keywords
      # my reference: http://www.cookwood.com/html/extras/cssref.html
      "inherit","none",      # everything?
      "auto","normal","url", # so many things
      "transparent",         # color
      #background-image:
      "scroll","fixed",
      #background-position:
      "top","center","bottom","left","right",
      #background-repeat:
      "repeat","repeat-x","repeat-y","no-repeat",
      #border-type:
      "dotted","dashed","solid","double","groove","ridge","inset","outset",
      #border-width:
      "thin","medium","thick",
      #clear, float:
      "both",
      #cursor:
      "crosshair","default","pointer","move",
      "e-resize","ne-resize","nw-resize","n-resize",
      "se-resize","sw-resize","s-resize","w-resize",
      "text","wait","help",
      #display:
      "inline","block","list-item",
      #font-size:
      "xx-small","x-small","small","medium","large","x-large","xx-large",
      "smaller","larger",
      #font-style:
      "normal","italic","oblique",
      #font-variant:
      "small-caps",
      #font-weight:
      "bold","bolder","lighter",
      #list-style-position:
      "inside","outside",
      #list-style-type:
      "disc","circle","square",
      "decimal","lower-roman","upper-roman","lower-alpha","upper-alpha",
      #marks:
      "crop","cross",
      #overflow:
      "visible","hidden","scroll",
      #page-break:
      "always","avoid",
      #position:
      "static","relative","absolute","fixed",
      # @page size:
      "landscape","portrait",
      #table border:
      "separate",
      #text-align:
      "justify",
      #text-decoration:
      "underline","overline","line-through","blink",
      #text-transform:
      "capitalize","uppercase","lowercase",
      #vertical-align:
      "baseline","sub","super","top","text-top","middle","text-bottom",
      #visibility:
      "visible","hidden","collapse",
      #white-space:
      "pre","nowrap",
      #units:
      "em","ex","px","in","cm","mm","pt","pc",
      #color names from http://www.w3.org/TR/CSS21/syndata.html#color-units
      "aqua", "black", "blue", "fuchsia", "gray", "green", "lime", "maroon",
      "navy", "olive", "purple", "red", "silver", "teal", "white", "yellow",
      "orange",
      #some very well-known font names :)
      "Verdana", "Helvetica", "Arial", "sans-serif", "serif",
     }
    h_wtype { -1, -1, -1, "i", "A-Za-z\-" }
    h_trans { 6, '', ';', 'Punctuation' }  # end of current rule
    h_trans { 0, '>', '}', 'Punctuation' } # end of rule setting
    h_trans { 14, '', '/*', 'Comment' }

    # Now the acid-test for my syntax-parser understanding :)
    # -> the 'comment' states:
    # one for each 'normal' state, so the original state is recorded somehow,
    # only exits when reaching end-of-comment, drops to original state.

    h_state 8 { 'Comment' }
    h_trans { 0, '', '*/', 'Comment' }
    h_state 9 { 'Comment' }
    h_trans { 1, '', '*/', 'Comment' }
    h_state 10 { 'Comment' }
    h_trans { 2, '', '*/', 'Comment' }
    h_state 11 { 'Comment' }
    h_trans { 3, '', '*/', 'Comment' }
    h_state 12 { 'Comment' }
    h_trans { 4, '', '*/', 'Comment' }
    h_state 13 { 'Comment' }
    h_trans { 6, '', '*/', 'Comment' }
    h_state 14 { 'Comment' }
    h_trans { 7, '', '*/', 'Comment' }
}

mode CSS: PLAIN {
#    WordChars           = '-A-Za-z0-9_';

    FileNameRx          = /\.\c{CSS}$/;
    HilitOn             = 1;
    Colorizer           = "CSS";
    MultiLineHilit      = 1;
    AutoHilitParen      = 1;
    RoutineRegexp       = /\.*\{)/;
    SaveFolds           = 2;      # save fold info at end of line
    CommentStart        = " /*";
    CommentEnd          = "*/";
}

oinclude 'mym_css.fte';
