#
# eFTE mode for VHDL
#

colorize VHDL {
    SyntaxParser = "SIMPLE";

    color {
        { "Normal",      "Editor_Default" },
        { "Function",    "Lang_Function" },
        { "Number",      "Lang_DecimalNumber" },
        { "Comment",     "Lang_Comment" },
        { "String",      "Lang_String" },
        { "Punctuation", "Lang_Punctuation" },
    };

    keyword "Editor_Keywords" {
        "abs", "access", "after", "alias", "all", "and", "architecture", "array", "assert", 
        "attribute", "begin", "block", "body", "buffer", "bus", "case", "component", 
        "configuration", "constant", "disconnect", "downto", "else", "elsif", "end", 
        "entity", "exit", "file", "for", "function", "generate", "generic", "group", 
        "guarded", "if", "impure", "in", "inertial", "inout", "is", "label", 
        "literal", "loop", "map", "mod", "nand", "new", "next", "nor", "not", "null", "of", 
        "on", "open", "or", "others", "out", "package", "port", "postponed", "procedure", 
        "process", "protected", "pure", "range", "record", "register", "reject", "rem", 
        "report", "return", "rol", "ror", "select", "severity", "signal", "shared", "sla", 
        "sll", "sra", "srl", "subtype", "then", "to", "transport", "type", "unaffected", "units", 
        "until", "variable", "wait", "when", "while", "with", "xnor", "xor"
    };

    keyword "Editor_Keywords2" {
        "library", "use"
    };

    keyword "Editor_Keywords3" {
        "boolean",
        "bit", "bit_vector",
        "std_ulogic", "std_ulogic_vector",
        "std_logic", "std_logic_vector",
        "integer", "natural",
        "real",
        "complex", "complex_vector", "complex_polar",
        "signed", "unsigned",
        "line", "text", "side", "width",
        "character", "string",
        "time"
    };

    h_state 0 { "Normal" }
    h_trans { 1, "-s", "a-zA-Z_", "Normal" }
    h_trans { 2, "<", "--", "Comment" }
    h_trans { 3, "", "\"", "String" }
    h_trans { 4, "x", "'.'", "String" }
    h_trans { 5, "<s", "0-9", "Number" }
    h_trans { 0, "S", "_a-zA-Z0-9", "Punctuation" }

    h_state 1 { "Normal" }
    h_trans { 0, "$", "", "Normal" }
    h_wtype { 1, 1, 0, "", "a-zA-Z0-9_" }

    h_state 2 { "Comment" }
    h_trans { 0, "$", "", "String" }

    h_state 3 { "String" }
    h_trans { 0, "", "\"", "String" }
    h_trans { 0, "$", "", "String" }
    h_trans { 3, "Qq", "\\", "String" }

    h_state 4 { "String" }
    h_trans { 0, "", "", "String" }

    h_state 5 { "Number" }
    h_trans { 0, "-S", "0-9_", "Normal" }
    h_trans { 0, "$", "", "Normal" }
}

mode VHDL: SOURCE {
    FileNameRx         = '\\.{vhdl}|{vhd}|{v93}|{v87}$';
    Colorizer          = "VHDL";
    IndentMode         = "PLAIN";
    AutoIndent         = 1;
    HilitOn            = 1;
    MatchCase          = 0;
    MultiLineHilit     = 1;
    AutoHilitParen     = 1;

    RoutineRegexp       = `^{{architecture}|{entity}} `;
}

oinclude 'mym_vhdl.fte';
